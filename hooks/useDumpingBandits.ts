// Generated by @wagmi/cli@0.1.6 on 2/13/2023 at 10:39:57â€¯PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DumpingBandits
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dumpingBanditsABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_rc', internalType: 'address', type: 'address' }],
  },
  { type: 'error', inputs: [], name: 'ALREADY_PARTICIPATED' },
  { type: 'error', inputs: [], name: 'CANT_FINALIZE_YET' },
  { type: 'error', inputs: [], name: 'NOT_OWNER' },
  { type: 'error', inputs: [], name: 'TOO_MANY' },
  { type: 'error', inputs: [], name: 'TOO_MANY_PRIZES' },
  { type: 'error', inputs: [], name: 'WRONG_PRICE' },
  { type: 'error', inputs: [], name: 'ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'ZERO_WINNERS' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'roundId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'participant',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'participantId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ParticipantAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'roundId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'participant',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Redistribution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'roundId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'randomness',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RoundFinalized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'roundId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RoundStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'finalizerReward',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetFinalizerReward',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minDuration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinDuration',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'noWinnerProbability',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetNoWinnerProbability',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'price',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetPrice',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'prizes',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'SetPrizes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'rc', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'SetRandomnessClient',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'redistributionReserve',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetRedistributionReserve',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'roundId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'participant',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'prizeId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'prizeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WonPrize',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultFinalizerReward',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultMinDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultNoWinnerProbability',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'defaultPrizes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultRedistributionReserve',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'finalizeRound',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'idParticipants',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'lookupId',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'lookupPrize',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nextTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'participantIds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'participate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rc',
    outputs: [
      { name: '', internalType: 'contract IRandomnessClient', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'roundId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'rounds',
    outputs: [
      { name: 'roundStartedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'totalParticipants', internalType: 'uint256', type: 'uint256' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
      { name: 'minDuration', internalType: 'uint256', type: 'uint256' },
      { name: 'noWinnerProbability', internalType: 'uint256', type: 'uint256' },
      { name: 'finalizerReward', internalType: 'uint256', type: 'uint256' },
      {
        name: 'redistributionReserve',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'randomness', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_finalizerReward', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setFinalizerReward',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_minDuration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinDuration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_noWinnerProbability',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setNoWinnerProbability',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_price', internalType: 'uint256', type: 'uint256' }],
    name: 'setPrice',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_prizes', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'setPrizes',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_rc', internalType: 'address', type: 'address' }],
    name: 'setRandomnessClient',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_redistributionReserve',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setRedistributionReserve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link dumpingBanditsABI}__.
 */
export function useDumpingBandits(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: dumpingBanditsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__.
 */
export function useDumpingBanditsRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useDumpingBanditsBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"defaultFinalizerReward"`.
 */
export function useDumpingBanditsDefaultFinalizerReward(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'defaultFinalizerReward'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'defaultFinalizerReward',
    ...config,
  } as UseContractReadConfig<
    typeof dumpingBanditsABI,
    'defaultFinalizerReward'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"defaultMinDuration"`.
 */
export function useDumpingBanditsDefaultMinDuration(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'defaultMinDuration'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'defaultMinDuration',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'defaultMinDuration'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"defaultNoWinnerProbability"`.
 */
export function useDumpingBanditsDefaultNoWinnerProbability(
  config: Omit<
    UseContractReadConfig<
      typeof dumpingBanditsABI,
      'defaultNoWinnerProbability'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'defaultNoWinnerProbability',
    ...config,
  } as UseContractReadConfig<
    typeof dumpingBanditsABI,
    'defaultNoWinnerProbability'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"defaultPrice"`.
 */
export function useDumpingBanditsDefaultPrice(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'defaultPrice'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'defaultPrice',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'defaultPrice'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"defaultPrizes"`.
 */
export function useDumpingBanditsDefaultPrizes(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'defaultPrizes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'defaultPrizes',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'defaultPrizes'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"defaultRedistributionReserve"`.
 */
export function useDumpingBanditsDefaultRedistributionReserve(
  config: Omit<
    UseContractReadConfig<
      typeof dumpingBanditsABI,
      'defaultRedistributionReserve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'defaultRedistributionReserve',
    ...config,
  } as UseContractReadConfig<
    typeof dumpingBanditsABI,
    'defaultRedistributionReserve'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"getApproved"`.
 */
export function useDumpingBanditsGetApproved(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"idParticipants"`.
 */
export function useDumpingBanditsIdParticipants(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'idParticipants'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'idParticipants',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'idParticipants'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useDumpingBanditsIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"lookupId"`.
 */
export function useDumpingBanditsLookupId(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'lookupId'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'lookupId',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'lookupId'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"lookupPrize"`.
 */
export function useDumpingBanditsLookupPrize(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'lookupPrize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'lookupPrize',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'lookupPrize'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"name"`.
 */
export function useDumpingBanditsName(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"nextTokenId"`.
 */
export function useDumpingBanditsNextTokenId(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'nextTokenId'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'nextTokenId',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'nextTokenId'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"owner"`.
 */
export function useDumpingBanditsOwner(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'owner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'owner'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useDumpingBanditsOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"participantIds"`.
 */
export function useDumpingBanditsParticipantIds(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'participantIds'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'participantIds',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'participantIds'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"rc"`.
 */
export function useDumpingBanditsRc(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'rc'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'rc',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'rc'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"roundId"`.
 */
export function useDumpingBanditsRoundId(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'roundId'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'roundId',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'roundId'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"rounds"`.
 */
export function useDumpingBanditsRounds(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'rounds'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'rounds',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'rounds'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useDumpingBanditsSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'supportsInterface'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"symbol"`.
 */
export function useDumpingBanditsSymbol(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useDumpingBanditsTokenUri(
  config: Omit<
    UseContractReadConfig<typeof dumpingBanditsABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dumpingBanditsABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof dumpingBanditsABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__.
 */
export function useDumpingBanditsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dumpingBanditsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof dumpingBanditsABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dumpingBanditsABI, TFunctionName>({
    abi: dumpingBanditsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"approve"`.
 */
export function useDumpingBanditsApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dumpingBanditsABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof dumpingBanditsABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dumpingBanditsABI, 'approve'>({
    abi: dumpingBanditsABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"finalizeRound"`.
 */
export function useDumpingBanditsFinalizeRound<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dumpingBanditsABI,
          'finalizeRound'
        >['abi'],
        'finalizeRound'
      > & { functionName?: 'finalizeRound' }
    : UseContractWriteConfig<
        TMode,
        typeof dumpingBanditsABI,
        'finalizeRound'
      > & {
        abi?: never
        functionName?: 'finalizeRound'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dumpingBanditsABI, 'finalizeRound'>({
    abi: dumpingBanditsABI,
    functionName: 'finalizeRound',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"participate"`.
 */
export function useDumpingBanditsParticipate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dumpingBanditsABI,
          'participate'
        >['abi'],
        'participate'
      > & { functionName?: 'participate' }
    : UseContractWriteConfig<TMode, typeof dumpingBanditsABI, 'participate'> & {
        abi?: never
        functionName?: 'participate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dumpingBanditsABI, 'participate'>({
    abi: dumpingBanditsABI,
    functionName: 'participate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useDumpingBanditsSafeTransferFrom<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dumpingBanditsABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof dumpingBanditsABI,
        'safeTransferFrom'
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dumpingBanditsABI, 'safeTransferFrom'>({
    abi: dumpingBanditsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useDumpingBanditsSetApprovalForAll<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dumpingBanditsABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        TMode,
        typeof dumpingBanditsABI,
        'setApprovalForAll'
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dumpingBanditsABI, 'setApprovalForAll'>(
    {
      abi: dumpingBanditsABI,
      functionName: 'setApprovalForAll',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setFinalizerReward"`.
 */
export function useDumpingBanditsSetFinalizerReward<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dumpingBanditsABI,
          'setFinalizerReward'
        >['abi'],
        'setFinalizerReward'
      > & { functionName?: 'setFinalizerReward' }
    : UseContractWriteConfig<
        TMode,
        typeof dumpingBanditsABI,
        'setFinalizerReward'
      > & {
        abi?: never
        functionName?: 'setFinalizerReward'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof dumpingBanditsABI,
    'setFinalizerReward'
  >({
    abi: dumpingBanditsABI,
    functionName: 'setFinalizerReward',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setMinDuration"`.
 */
export function useDumpingBanditsSetMinDuration<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dumpingBanditsABI,
          'setMinDuration'
        >['abi'],
        'setMinDuration'
      > & { functionName?: 'setMinDuration' }
    : UseContractWriteConfig<
        TMode,
        typeof dumpingBanditsABI,
        'setMinDuration'
      > & {
        abi?: never
        functionName?: 'setMinDuration'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dumpingBanditsABI, 'setMinDuration'>({
    abi: dumpingBanditsABI,
    functionName: 'setMinDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setNoWinnerProbability"`.
 */
export function useDumpingBanditsSetNoWinnerProbability<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dumpingBanditsABI,
          'setNoWinnerProbability'
        >['abi'],
        'setNoWinnerProbability'
      > & { functionName?: 'setNoWinnerProbability' }
    : UseContractWriteConfig<
        TMode,
        typeof dumpingBanditsABI,
        'setNoWinnerProbability'
      > & {
        abi?: never
        functionName?: 'setNoWinnerProbability'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof dumpingBanditsABI,
    'setNoWinnerProbability'
  >({
    abi: dumpingBanditsABI,
    functionName: 'setNoWinnerProbability',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setOwner"`.
 */
export function useDumpingBanditsSetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dumpingBanditsABI, 'setOwner'>['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof dumpingBanditsABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dumpingBanditsABI, 'setOwner'>({
    abi: dumpingBanditsABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setPrice"`.
 */
export function useDumpingBanditsSetPrice<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dumpingBanditsABI, 'setPrice'>['abi'],
        'setPrice'
      > & { functionName?: 'setPrice' }
    : UseContractWriteConfig<TMode, typeof dumpingBanditsABI, 'setPrice'> & {
        abi?: never
        functionName?: 'setPrice'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dumpingBanditsABI, 'setPrice'>({
    abi: dumpingBanditsABI,
    functionName: 'setPrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setPrizes"`.
 */
export function useDumpingBanditsSetPrizes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dumpingBanditsABI,
          'setPrizes'
        >['abi'],
        'setPrizes'
      > & { functionName?: 'setPrizes' }
    : UseContractWriteConfig<TMode, typeof dumpingBanditsABI, 'setPrizes'> & {
        abi?: never
        functionName?: 'setPrizes'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dumpingBanditsABI, 'setPrizes'>({
    abi: dumpingBanditsABI,
    functionName: 'setPrizes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setRandomnessClient"`.
 */
export function useDumpingBanditsSetRandomnessClient<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dumpingBanditsABI,
          'setRandomnessClient'
        >['abi'],
        'setRandomnessClient'
      > & { functionName?: 'setRandomnessClient' }
    : UseContractWriteConfig<
        TMode,
        typeof dumpingBanditsABI,
        'setRandomnessClient'
      > & {
        abi?: never
        functionName?: 'setRandomnessClient'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof dumpingBanditsABI,
    'setRandomnessClient'
  >({
    abi: dumpingBanditsABI,
    functionName: 'setRandomnessClient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setRedistributionReserve"`.
 */
export function useDumpingBanditsSetRedistributionReserve<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dumpingBanditsABI,
          'setRedistributionReserve'
        >['abi'],
        'setRedistributionReserve'
      > & { functionName?: 'setRedistributionReserve' }
    : UseContractWriteConfig<
        TMode,
        typeof dumpingBanditsABI,
        'setRedistributionReserve'
      > & {
        abi?: never
        functionName?: 'setRedistributionReserve'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof dumpingBanditsABI,
    'setRedistributionReserve'
  >({
    abi: dumpingBanditsABI,
    functionName: 'setRedistributionReserve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useDumpingBanditsTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dumpingBanditsABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof dumpingBanditsABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dumpingBanditsABI, 'transferFrom'>({
    abi: dumpingBanditsABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__.
 */
export function usePrepareDumpingBanditsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dumpingBanditsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof dumpingBanditsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareDumpingBanditsApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"finalizeRound"`.
 */
export function usePrepareDumpingBanditsFinalizeRound(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'finalizeRound'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'finalizeRound',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'finalizeRound'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"participate"`.
 */
export function usePrepareDumpingBanditsParticipate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'participate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'participate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'participate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareDumpingBanditsSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dumpingBanditsABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareDumpingBanditsSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dumpingBanditsABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dumpingBanditsABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setFinalizerReward"`.
 */
export function usePrepareDumpingBanditsSetFinalizerReward(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dumpingBanditsABI,
      'setFinalizerReward'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'setFinalizerReward',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dumpingBanditsABI,
    'setFinalizerReward'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setMinDuration"`.
 */
export function usePrepareDumpingBanditsSetMinDuration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'setMinDuration'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'setMinDuration',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dumpingBanditsABI,
    'setMinDuration'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setNoWinnerProbability"`.
 */
export function usePrepareDumpingBanditsSetNoWinnerProbability(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dumpingBanditsABI,
      'setNoWinnerProbability'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'setNoWinnerProbability',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dumpingBanditsABI,
    'setNoWinnerProbability'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareDumpingBanditsSetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setPrice"`.
 */
export function usePrepareDumpingBanditsSetPrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'setPrice'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'setPrice',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'setPrice'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setPrizes"`.
 */
export function usePrepareDumpingBanditsSetPrizes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'setPrizes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'setPrizes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'setPrizes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setRandomnessClient"`.
 */
export function usePrepareDumpingBanditsSetRandomnessClient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dumpingBanditsABI,
      'setRandomnessClient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'setRandomnessClient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dumpingBanditsABI,
    'setRandomnessClient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"setRedistributionReserve"`.
 */
export function usePrepareDumpingBanditsSetRedistributionReserve(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof dumpingBanditsABI,
      'setRedistributionReserve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'setRedistributionReserve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dumpingBanditsABI,
    'setRedistributionReserve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dumpingBanditsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareDumpingBanditsTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dumpingBanditsABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dumpingBanditsABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__.
 */
export function useDumpingBanditsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"Approval"`.
 */
export function useDumpingBanditsApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useDumpingBanditsApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"ParticipantAdded"`.
 */
export function useDumpingBanditsParticipantAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'ParticipantAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'ParticipantAdded',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'ParticipantAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"Redistribution"`.
 */
export function useDumpingBanditsRedistributionEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'Redistribution'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'Redistribution',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'Redistribution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"RoundFinalized"`.
 */
export function useDumpingBanditsRoundFinalizedEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'RoundFinalized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'RoundFinalized',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'RoundFinalized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"RoundStarted"`.
 */
export function useDumpingBanditsRoundStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'RoundStarted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'RoundStarted',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'RoundStarted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"SetFinalizerReward"`.
 */
export function useDumpingBanditsSetFinalizerRewardEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'SetFinalizerReward'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'SetFinalizerReward',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'SetFinalizerReward'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"SetMinDuration"`.
 */
export function useDumpingBanditsSetMinDurationEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'SetMinDuration'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'SetMinDuration',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'SetMinDuration'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"SetNoWinnerProbability"`.
 */
export function useDumpingBanditsSetNoWinnerProbabilityEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'SetNoWinnerProbability'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'SetNoWinnerProbability',
    ...config,
  } as UseContractEventConfig<
    typeof dumpingBanditsABI,
    'SetNoWinnerProbability'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"SetOwner"`.
 */
export function useDumpingBanditsSetOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'SetOwner'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'SetOwner',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'SetOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"SetPrice"`.
 */
export function useDumpingBanditsSetPriceEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'SetPrice'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'SetPrice',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'SetPrice'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"SetPrizes"`.
 */
export function useDumpingBanditsSetPrizesEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'SetPrizes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'SetPrizes',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'SetPrizes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"SetRandomnessClient"`.
 */
export function useDumpingBanditsSetRandomnessClientEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'SetRandomnessClient'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'SetRandomnessClient',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'SetRandomnessClient'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"SetRedistributionReserve"`.
 */
export function useDumpingBanditsSetRedistributionReserveEvent(
  config: Omit<
    UseContractEventConfig<
      typeof dumpingBanditsABI,
      'SetRedistributionReserve'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'SetRedistributionReserve',
    ...config,
  } as UseContractEventConfig<
    typeof dumpingBanditsABI,
    'SetRedistributionReserve'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"Transfer"`.
 */
export function useDumpingBanditsTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dumpingBanditsABI}__ and `eventName` set to `"WonPrize"`.
 */
export function useDumpingBanditsWonPrizeEvent(
  config: Omit<
    UseContractEventConfig<typeof dumpingBanditsABI, 'WonPrize'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dumpingBanditsABI,
    eventName: 'WonPrize',
    ...config,
  } as UseContractEventConfig<typeof dumpingBanditsABI, 'WonPrize'>)
}
